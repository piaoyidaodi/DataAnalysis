package cc.comac.data;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import cc.comac.util.Context;

public class DataPreProcess {

    // set the fileChooser to only "txt" file
    private String workSpace=null;
    private String targetFile=null;
    private String space="";

    
    public DataPreProcess(){}
    
    public void initFile(){
        
        boolean isProcessed=false;
        targetFile=Context.getInstance().getTargetFile();
        
        System.out.println(targetFile);
        
        if(targetFile!=null){
            File target=new File(targetFile);
            if (target.exists()) {
                File[] fileList=new File(target.getParent()).listFiles();
                for (File file : fileList) {
                    if (file.isDirectory()&&file.getName().equals(getNameNoPFix(target))) {
                        //TODO Preprocess has been done
                        isProcessed=true;
                        System.out.println(target.getAbsolutePath()+" File Processed");
                    }
                }
                if (!isProcessed) {
                    FileDataProcess fDataProcess=new FileDataProcess(targetFile);
                    fDataProcess.doProcess();
                }
                
            }
            
        }
        
    }
    
    public void initDirectory(){
        boolean isProcessed=false;
        workSpace=Context.getInstance().getWorkSpace();
        System.out.println(workSpace);
        
        if (workSpace!=null) {
            File workSpaceFile=new File(workSpace);
            if (workSpaceFile.exists()&&workSpaceFile.isDirectory()) {
                File[] fileList=workSpaceFile.listFiles();
                for (File file : fileList) {
                    if (file.getName().equals("markFile.md")) {
                        isProcessed=true;
                        System.out.println(workSpaceFile.getAbsolutePath()+" Directory Processed");
                        
                    }
                }
                if (!isProcessed) {
                    WorkspaceDataProcess wDataProcess=new WorkspaceDataProcess(workSpace);
                    wDataProcess.initWorkSpace();
                    markAsProcessed(workSpaceFile);
                }
            }
        }
    }

    
    private void markAsProcessed(File workSpaceFile) {
        File markFile=new File(workSpaceFile, "markFile.md");
        try {
            BufferedWriter fileWriter=new BufferedWriter(new FileWriter(markFile));
            String headInfo="# This is auto generated by the process, DO NOT MODIFY OR DELETE this file.\n";
            fileWriter.write(headInfo);
            doLoop(workSpaceFile,fileWriter);
            fileWriter.flush();
            fileWriter.close();
            
            
        } catch (IOException e) {
            
            e.printStackTrace();
        }
        
    }
    
    private void doLoop(File file,BufferedWriter writer) {
//        if (file.isDirectory()){
            try {
                writer.write(space+file.getName()+"\n");
                space=space+"-->";
            } catch (IOException e) {
                e.printStackTrace();
            }
            File[] fileList=file.listFiles();
            for (File subFile:fileList){
                if (subFile.isDirectory()) {
                    doLoop(subFile,writer);
                    space=space.substring(0,space.length()-3);
                }else {
                    try {
                        writer.write(space+subFile.getName()+"\n");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                
//                space=space.substring(0,space.length()-2);
            }
//        }
    }

    private String getNameNoPFix(File file){
        if (!file.isDirectory())
            return file.getName().substring(0,file.getName().lastIndexOf("."));
        else return file.getName();
    }
}
